version: '3.8'

services:
  web:
    build: ./app
    container_name: miapp
    ports:
      - "5000:5000"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_USERNAME}
      - DB_PASS=${POSTGRES_PASSWORD}
    networks:
      - frontend
      - backend
    links:
      - db

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8443:443"
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: andres@domain.com
      PGADMIN_DEFAULT_PASSWORD: andres
      PGADMIN_ENABLE_TLS: True
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - /home/ubuntu/docker_volumes/certs/certificate.crt:/certs/server.cert
      - /home/ubuntu/docker_volumes/certs/certificate.key:/certs/server.key
      - /tmp/servers.json:/pgadmin4/servers.json
    networks:
      - frontend
      - backend
    links:
      - db

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Europe/Madrid
    healthcheck:
      # used in flask container depends_on condition to wait for the DB to be ready
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB_NAME}" ]
      interval: 5s
      timeout: 20s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend



volumes:
  pgdata:
  pgadmin_data:

networks:
  frontend:
    # Specify driver options
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  backend:
    # Use a custom driver
    driver: bridge
